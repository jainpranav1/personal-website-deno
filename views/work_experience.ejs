<!DOCTYPE html>
<html>
  <head>
    <%- await include('views/bootstrap.ejs', {}) %>
    <style>
      body {
        display: flex;
        min-height: 100vh;
        flex-direction: column;
        background-image: linear-gradient(lightskyblue, white);
      }

      .content {
        flex-grow: 1;
      }

      .accordion-item {
        border-color: black;
        border-width: 3px;
      }

      .list-group-item {
        border-color: black;
        border-width: 2px;
      }
    </style>
  </head>

  <body>
    <%- await include('views/navbar.ejs', {}) %>
    <div class="container content mt-3 mb-3">
      <h1>Work Experience</h1>
      <div class="accordion mt-3" id="accordionExample">
        <div class="accordion-item">
          <h2 class="accordion-header" id="headingFour">
            <button
              class="accordion-button collapsed shadow-none"
              type="button"
              data-bs-toggle="collapse"
              data-bs-target="#collapseFour"
              aria-expanded="false"
              aria-controls="collapseFour"
            >
              Capital One - TIP Intern
            </button>
          </h2>
          <div
            id="collapseFour"
            class="accordion-collapse collapse"
            aria-labelledby="headingFour"
            data-bs-parent="#accordionExample"
          >
            <div class="accordion-body">
              <p><b>6/8/24 - 8/9/24</b></p>
              <p>
                I worked in-person as a full-time, paid computer science intern
                for 40 hours per week for 10 weeks in Plano, TX. This was my
                third internship at Capital One. I enjoyed my experience.
              </p>
              <p>
                Qith four other interns, I worked on and deployed the
                Contribution Readiness Project, an augmentation of the CoDev
                website. CoDev is a platform for innersourcing - opensourcing
                within a company - at Capital One. The project focused on two
                problems. In order to contribute to an innersource repository,
                contributors would need to manually search through a repo to
                find its contribution model - the instructions and details about
                contributing. Examples of items included within a contribution
                model is a link to developer setup documentation and a promise
                that pull requests (PR) would be commented on within 3 days.
                Also, a repo's team may not keep the repo's contribution model
                and their contribution practice statistics in alignment. For
                example, a repo;s contribution model may promise a PR comment
                time of 3 days, while in reality, the PR comment time is 5 days.
                The Contribution Readiness solved these two problems by
                displaying an innersourced repo's contribution model, the
                contribution statistics of the repo's team, and suggestions on
                how to improve the contribution model.
              </p>
              <p>
                I used
                <a
                  href="https://nodejs.org/en"
                  class="link-primary"
                  target="_blank"
                  >Node.js</a
                >
                as our runtime environment to run our code,
                <a
                  href="https://nodejs.org/en"
                  class="link-primary"
                  target="_blank"
                  >TypeScript</a
                >as our programming language to reduce bugs,
                <a
                  href="https://expressjs.com/"
                  class="link-primary"
                  target="_blank"
                  >Express.js</a
                >as our web application framework,
                <a href="https://zod.dev/" class="link-primary" target="_blank"
                  >Zod</a
                >
                to make sure variables had the correct format, and
                <a
                  href="https://jestjs.io/"
                  class="link-primary"
                  target="_blank"
                  >Jest</a
                >
                to create unit tests. After extensive review of my code by
                senior developers, it was deployed to the CoDev website.
              </p>
              <p>
                Aside from development, I enjoyed participating in a hackathon
                with an interdisciplinary team (technology, product management,
                and cyber security interns) to design Business Finder. Business
                Finder allows large companies to find and patronize small black
                and brown businesses within Virginia, helping the small
                companies by bringing them new customers. I also enjoyed
                attending Capital One events (ex. TopGolf, Dominion Amusement
                Park, Bowling) and spending time with my friendly manager and
                intern group.
              </p>
            </div>
          </div>
        </div>
        <div class="accordion-item">
          <h2 class="accordion-header" id="headingThree">
            <button
              class="accordion-button collapsed shadow-none"
              type="button"
              data-bs-toggle="collapse"
              data-bs-target="#collapseThree"
              aria-expanded="false"
              aria-controls="collapseThree"
            >
              Capital One - TIP Intern
            </button>
          </h2>
          <div
            id="collapseThree"
            class="accordion-collapse collapse"
            aria-labelledby="headingThree"
            data-bs-parent="#accordionExample"
          >
            <div class="accordion-body">
              <p><b>6/6/23 - 8/12/23</b></p>
              <p>
                I worked in-person as a full-time, paid computer science intern
                for 40 hours per week for 10 weeks in Plano, TX. This was my
                second internship at Capital One. I fully enjoyed my internship.
              </p>
              <p>
                I worked with four other interns on InfluxGen, which aimed to
                solve the following problem. The Marketing Navigator team wanted
                a tool that allowed them to develop data pipelines for any
                distributed processing framework (<a
                  href="https://spark.apache.org/"
                  class="link-primary"
                  target="_blank"
                  >Apache Spark</a
                >,
                <a
                  href="https://flink.apache.org/"
                  class="link-primary"
                  target="_blank"
                  >Apache Flink</a
                >,
                <a
                  href="https://cloud.google.com/dataflow?hl=en"
                  class="link-primary"
                  target="_blank"
                  >Google Cloud Dataflow Runner</a
                >, etc.) without code (using only a JSON file). Unfortunately,
                the tool that they had only allowed them to develop data
                pipelines for Apache Spark without code. Consequently, the team
                could not make use of the different advantages that each
                distributed processing framework provided. The goal of InfluxGen
                was to develop a tool that allowed the team to develop data
                pipelines without code for any distributed processing framework.
                During my internship, I made use of
                <a
                  href="https://beam.apache.org/"
                  class="link-primary"
                  target="_blank"
                  >Apache Beam</a
                >
                which enabled the development of data pipelines for any
                distributed processing framework with code and
                <a
                  href="https://www.java.com/en/"
                  class="link-primary"
                  target="_blank"
                  >Java</a
                >
                as the programming language.
              </p>
              <p>
                Outside of work, I enjoyed participating in a company hackathon.
                Here, I worked with another intern to develop a Node.js app that
                helped developers record code snippets alongside output while
                debugging, allowing programmers to debug without forgetting
                previous findings. I also enjoyed exercising and playing
                basketball with others at the Capital One gym and swimming at
                the Frisco Athletic center.
              </p>
            </div>
          </div>
        </div>
        <div class="accordion-item">
          <h2 class="accordion-header" id="headingTwo">
            <button
              class="accordion-button collapsed shadow-none"
              type="button"
              data-bs-toggle="collapse"
              data-bs-target="#collapseTwo"
              aria-expanded="false"
              aria-controls="collapseTwo"
            >
              Capital One - TIP Intern
            </button>
          </h2>
          <div
            id="collapseTwo"
            class="accordion-collapse collapse"
            aria-labelledby="headingTwo"
            data-bs-parent="#accordionExample"
          >
            <div class="accordion-body">
              <p><b>6/6/22 - 8/12/22</b></p>
              <p>
                I worked in-person as a full-time, paid computer science intern
                for 40 hours per week for 10 weeks in Plano, TX. I really
                enjoyed my experience.
              </p>
              <p>
                I worked with three other interns on the Solution Catalog
                project. This project was inspired by the following problem.
                Business analysts (BA) and product owners (PO) would not be able
                to independently view and edit the eligibility rules of
                different capital one solutions. Instead, they would need to ask
                software engineers to perform these tasks for them using SQL
                scripts. The goal of this project was to develop a website that
                enabled BAs and POs to view and edit these rules themselves.
              </p>
              <p>
                Throughout my internship, I worked on the frontend side of the
                Solution Catalog project. I used
                <a
                  href="https://nodejs.org/en/"
                  class="link-primary"
                  target="_blank"
                  >Node.js</a
                >
                as our runtime environment to run our code,
                <a href="https://lit.dev/" class="link-primary" target="_blank"
                  >Lit Element</a
                >
                for developing web components to reduce code, used
                <a
                  href="https://webpack.js.org/"
                  class="link-primary"
                  target="_blank"
                  >Web Pack</a
                >
                as our bundler to reduce load time, used
                <a
                  href="https://webpack.js.org/"
                  class="link-primary"
                  target="_blank"
                  >Type Script</a
                >
                as our programming language to reduce bugs, and used
                <a
                  href="https://axios-http.com/"
                  class="link-primary"
                  target="_blank"
                  >Axios</a
                >
                as our http client in order to allow our frontend to communicate
                with out backend. I also used
                <a
                  href="https://modern-web.dev/docs/test-runner/overview/"
                  class="link-primary"
                  target="_blank"
                  >Web Test Runner</a
                >
                which made use of
                <a
                  href="https://playwright.dev/"
                  class="link-primary"
                  target="_blank"
                  >Playwright</a
                >
                and
                <a
                  href="https://sinonjs.org/"
                  class="link-primary"
                  target="_blank"
                  >Sinon.js</a
                >
                for developing unit tests.
              </p>

              <p>
                Apart from development, I had lots of fun attending different
                Capital One events and meeting other Capital One interns and
                employees. I especially enjoyed our final intern celebration in
                which all the interns were flown out to the headquarters of
                Capital One in Mclean, Virginia.
              </p>
            </div>
          </div>
        </div>
        <div class="accordion-item">
          <h2 class="accordion-header" id="headingOne">
            <button
              class="accordion-button collapsed shadow-none"
              type="button"
              data-bs-toggle="collapse"
              data-bs-target="#collapseOne"
              aria-expanded="false"
              aria-controls="collapseOne"
            >
              Takeda - Computer Science Intern
            </button>
          </h2>
          <div
            id="collapseOne"
            class="accordion-collapse collapse"
            aria-labelledby="headingOne"
            data-bs-parent="#accordionExample"
          >
            <div class="accordion-body">
              <p><b>6/1/21 - 8/20/21</b></p>

              <p>
                I worked remotely as a full-time, paid computer science intern
                for 40 hours per week for 12 weeks. Overall, I had a really
                great experience. I met a alot of different types of people,
                including a consultant, product manager, and technical lead. I
                also worked on the following projects:
              </p>
              <ul class="list-group">
                <li class="list-group-item">
                  <p><b>myPKFiT Isitup project</b></p>
                  <p>
                    I developed a Node JS based tool that can check the login
                    page status of the myPKFiT site for over 50 countries every
                    15 minutes. Before this tool, the myPKFiT team would only
                    know about login issues after their users had already
                    experienced them. My program allowed the team to know about
                    and fix issues before users experience them, providing a
                    better site experience for users.
                  </p>
                </li>
                <li class="list-group-item">
                  <p><b>HCP Specification Documentation</b></p>
                  <p>
                    Along with a fellow intern, I developed a document
                    containing the functionalities and formatting data of the
                    myPKFiT web application for over 50 countries. To reduce
                    human error in data collection, I developed a Node JS based
                    tool that automatically extracted the formatting data for
                    each country's web application and placed the data into an
                    excel file. This document was presented to the myPKFiT
                    quality team and now resides in the myPKFiT technical file.
                  </p>
                </li>
                <li class="list-group-item">
                  <p><b>myPKFiT Screenshot Automation Tool</b></p>
                  <p>
                    I developed a tool that can automatically extract
                    screenshots from the myPKFiT site and add them to a word
                    document. This tool was developed to remove the need for
                    manually collecting and adding screenshots to user manuals,
                    a process that took approximately 3 hours per country. While
                    my tool was only a proof of concept, once fully extended by
                    future developers, the screenshot collection process will
                    take 10-20 minutes and be fully automated.
                  </p>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
    <%- await include('views/footer.ejs', {}) %>
  </body>
</html>
